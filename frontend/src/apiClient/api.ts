/* tslint:disable */
/* eslint-disable */
/**
 * Juegocartas API
 * Especificación OpenAPI mínima para el backend de Juegocartas. Incluye los endpoints principales usados por el cliente Next.js (partidas, jugar cartas, transformaciones).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActivarTransformacionRequest
 */
export interface ActivarTransformacionRequest {
    /**
     * Id del jugador que activa la transformación
     * @type {string}
     * @memberof ActivarTransformacionRequest
     */
    'jugadorId': string;
    /**
     * Índice (0-based) de la transformación disponible en la carta del jugador
     * @type {number}
     * @memberof ActivarTransformacionRequest
     */
    'indiceTransformacion': number;
}
/**
 * 
 * @export
 * @interface DesactivarTransformacionRequest
 */
export interface DesactivarTransformacionRequest {
    /**
     * Id del jugador que desactiva la transformación
     * @type {string}
     * @memberof DesactivarTransformacionRequest
     */
    'jugadorId': string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'timestamp'?: string;
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'path'?: string;
}
/**
 * 
 * @export
 * @interface JugadaResult
 */
export interface JugadaResult {
    /**
     * 
     * @type {string}
     * @memberof JugadaResult
     */
    'ganadorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof JugadaResult
     */
    'detalles'?: string;
}
/**
 * 
 * @export
 * @interface JugadorSummary
 */
export interface JugadorSummary {
    /**
     * 
     * @type {string}
     * @memberof JugadorSummary
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof JugadorSummary
     */
    'nombre'?: string;
    /**
     * 
     * @type {number}
     * @memberof JugadorSummary
     */
    'puntos'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof JugadorSummary
     */
    'transformacionActiva'?: boolean;
}
/**
 * 
 * @export
 * @interface JugarCartaRequest
 */
export interface JugarCartaRequest {
    /**
     * Id del jugador que juega la carta
     * @type {string}
     * @memberof JugarCartaRequest
     */
    'jugadorId': string;
    /**
     * Id de la carta que se juega
     * @type {string}
     * @memberof JugarCartaRequest
     */
    'cartaId': string;
    /**
     * Atributo elegido para la comparación (por ejemplo \"ki\", \"fuerza\")
     * @type {string}
     * @memberof JugarCartaRequest
     */
    'atributoSeleccionado'?: string;
}
/**
 * 
 * @export
 * @interface PartidaSummary
 */
export interface PartidaSummary {
    /**
     * 
     * @type {string}
     * @memberof PartidaSummary
     */
    'codigo'?: string;
    /**
     * Estado de la partida (p. ej. WAITING, IN_PROGRESS, FINISHED)
     * @type {string}
     * @memberof PartidaSummary
     */
    'estado'?: string;
    /**
     * 
     * @type {Array<JugadorSummary>}
     * @memberof PartidaSummary
     */
    'jugadores'?: Array<JugadorSummary>;
    /**
     * 
     * @type {number}
     * @memberof PartidaSummary
     */
    'cartasRestantes'?: number;
}
/**
 * 
 * @export
 * @interface TransformacionResponse
 */
export interface TransformacionResponse {
    /**
     * 
     * @type {string}
     * @memberof TransformacionResponse
     */
    'jugadorId'?: string;
    /**
     * 
     * @type {number}
     * @memberof TransformacionResponse
     */
    'indice'?: number;
    /**
     * 
     * @type {string}
     * @memberof TransformacionResponse
     */
    'nombre'?: string;
    /**
     * 
     * @type {number}
     * @memberof TransformacionResponse
     */
    'multiplicador'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TransformacionResponse
     */
    'activa'?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Obtener resumen de una partida
         * @param {string} codigo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartidasCodigoGet: async (codigo: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codigo' is not null or undefined
            assertParamExists('apiPartidasCodigoGet', 'codigo', codigo)
            const localVarPath = `/api/partidas/{codigo}`
                .replace(`{${"codigo"}}`, encodeURIComponent(String(codigo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Jugar una carta en la partida
         * @param {string} codigo 
         * @param {JugarCartaRequest} jugarCartaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartidasCodigoJugarPost: async (codigo: string, jugarCartaRequest: JugarCartaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codigo' is not null or undefined
            assertParamExists('apiPartidasCodigoJugarPost', 'codigo', codigo)
            // verify required parameter 'jugarCartaRequest' is not null or undefined
            assertParamExists('apiPartidasCodigoJugarPost', 'jugarCartaRequest', jugarCartaRequest)
            const localVarPath = `/api/partidas/{codigo}/jugar`
                .replace(`{${"codigo"}}`, encodeURIComponent(String(codigo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jugarCartaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Activar una transformación para un jugador en la partida
         * @param {string} codigo 
         * @param {ActivarTransformacionRequest} activarTransformacionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartidasCodigoTransformacionesActivarPost: async (codigo: string, activarTransformacionRequest: ActivarTransformacionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codigo' is not null or undefined
            assertParamExists('apiPartidasCodigoTransformacionesActivarPost', 'codigo', codigo)
            // verify required parameter 'activarTransformacionRequest' is not null or undefined
            assertParamExists('apiPartidasCodigoTransformacionesActivarPost', 'activarTransformacionRequest', activarTransformacionRequest)
            const localVarPath = `/api/partidas/{codigo}/transformaciones/activar`
                .replace(`{${"codigo"}}`, encodeURIComponent(String(codigo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(activarTransformacionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Desactivar la transformación activa de un jugador
         * @param {string} codigo 
         * @param {DesactivarTransformacionRequest} desactivarTransformacionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartidasCodigoTransformacionesDesactivarPost: async (codigo: string, desactivarTransformacionRequest: DesactivarTransformacionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codigo' is not null or undefined
            assertParamExists('apiPartidasCodigoTransformacionesDesactivarPost', 'codigo', codigo)
            // verify required parameter 'desactivarTransformacionRequest' is not null or undefined
            assertParamExists('apiPartidasCodigoTransformacionesDesactivarPost', 'desactivarTransformacionRequest', desactivarTransformacionRequest)
            const localVarPath = `/api/partidas/{codigo}/transformaciones/desactivar`
                .replace(`{${"codigo"}}`, encodeURIComponent(String(codigo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(desactivarTransformacionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Obtener resumen de una partida
         * @param {string} codigo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartidasCodigoGet(codigo: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartidaSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartidasCodigoGet(codigo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiPartidasCodigoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Jugar una carta en la partida
         * @param {string} codigo 
         * @param {JugarCartaRequest} jugarCartaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartidasCodigoJugarPost(codigo: string, jugarCartaRequest: JugarCartaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JugadaResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartidasCodigoJugarPost(codigo, jugarCartaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiPartidasCodigoJugarPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Activar una transformación para un jugador en la partida
         * @param {string} codigo 
         * @param {ActivarTransformacionRequest} activarTransformacionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartidasCodigoTransformacionesActivarPost(codigo: string, activarTransformacionRequest: ActivarTransformacionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformacionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartidasCodigoTransformacionesActivarPost(codigo, activarTransformacionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiPartidasCodigoTransformacionesActivarPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Desactivar la transformación activa de un jugador
         * @param {string} codigo 
         * @param {DesactivarTransformacionRequest} desactivarTransformacionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartidasCodigoTransformacionesDesactivarPost(codigo: string, desactivarTransformacionRequest: DesactivarTransformacionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformacionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartidasCodigoTransformacionesDesactivarPost(codigo, desactivarTransformacionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiPartidasCodigoTransformacionesDesactivarPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Obtener resumen de una partida
         * @param {string} codigo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartidasCodigoGet(codigo: string, options?: RawAxiosRequestConfig): AxiosPromise<PartidaSummary> {
            return localVarFp.apiPartidasCodigoGet(codigo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Jugar una carta en la partida
         * @param {string} codigo 
         * @param {JugarCartaRequest} jugarCartaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartidasCodigoJugarPost(codigo: string, jugarCartaRequest: JugarCartaRequest, options?: RawAxiosRequestConfig): AxiosPromise<JugadaResult> {
            return localVarFp.apiPartidasCodigoJugarPost(codigo, jugarCartaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Activar una transformación para un jugador en la partida
         * @param {string} codigo 
         * @param {ActivarTransformacionRequest} activarTransformacionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartidasCodigoTransformacionesActivarPost(codigo: string, activarTransformacionRequest: ActivarTransformacionRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransformacionResponse> {
            return localVarFp.apiPartidasCodigoTransformacionesActivarPost(codigo, activarTransformacionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Desactivar la transformación activa de un jugador
         * @param {string} codigo 
         * @param {DesactivarTransformacionRequest} desactivarTransformacionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartidasCodigoTransformacionesDesactivarPost(codigo: string, desactivarTransformacionRequest: DesactivarTransformacionRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransformacionResponse> {
            return localVarFp.apiPartidasCodigoTransformacionesDesactivarPost(codigo, desactivarTransformacionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Obtener resumen de una partida
     * @param {string} codigo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPartidasCodigoGet(codigo: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiPartidasCodigoGet(codigo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Jugar una carta en la partida
     * @param {string} codigo 
     * @param {JugarCartaRequest} jugarCartaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPartidasCodigoJugarPost(codigo: string, jugarCartaRequest: JugarCartaRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiPartidasCodigoJugarPost(codigo, jugarCartaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Activar una transformación para un jugador en la partida
     * @param {string} codigo 
     * @param {ActivarTransformacionRequest} activarTransformacionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPartidasCodigoTransformacionesActivarPost(codigo: string, activarTransformacionRequest: ActivarTransformacionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiPartidasCodigoTransformacionesActivarPost(codigo, activarTransformacionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Desactivar la transformación activa de un jugador
     * @param {string} codigo 
     * @param {DesactivarTransformacionRequest} desactivarTransformacionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPartidasCodigoTransformacionesDesactivarPost(codigo: string, desactivarTransformacionRequest: DesactivarTransformacionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiPartidasCodigoTransformacionesDesactivarPost(codigo, desactivarTransformacionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



